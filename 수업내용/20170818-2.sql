--DDL
--데이터 정의 언어
--데이터 관련 객체를 만들고, 객체를 수정하고, 객체를 삭제하는 구문
--CREATE 문, ALTER 문, DROP 문
--객체
--계정아래의 모든 디렉토리는 객체다.
--자바의 패키지는 클래스 묶음
--SQL의 패키지는 프로시저나 함수를 묶어놓은것을 말함.

/*
테이블 생성 - Naming Rule

 테이블 및 컬럼 이름
 문자로 시작, 30자 이하
 영문 대/소문자(A ~ Z, a ~ z), 숫자(0 ~ 9), 특수문자( _, $, # ), 한글만 포함 가능
 중복되는 이름은 사용할 수 없음
 예약 키워드(CREATE, TABLE, COLUMN 등)는 사용할 수 없음
*/

CREATE TABLE NOTICE(
NOTICE_NO           NUMBER,
NOTICE_TITLE         VARCHAR2(50) CONSTRAINT NOTICE_TITLE_NN NOT NULL,
NOTICE_WRITER     VARCHAR2(20) CONSTRAINT NOTICE_WRITER_NN NOT NULL,
NOTICE_DATE        DATE DEFAULT SYSDATE,
FILE_PATH             VARCHAR2(100),
NOTICE_CONTENT  VARCHAR2(4000)
);

COMMENT ON COLUMN NOTICE.NOTICE_NO IS '공지글번호';
COMMENT ON COLUMN NOTICE.NOTICE_TITLE IS '공지글제목';
COMMENT ON COLUMN NOTICE.NOTICE_WRITER IS '공지글작성자';
COMMENT ON COLUMN NOTICE.NOTICE_DATE IS '공지글작성날짜';
COMMENT ON COLUMN NOTICE.FILE_PATH IS '공지글파일경로';
COMMENT ON COLUMN NOTICE.NOTICE_CONTENT IS '공지';

DROP TABLE NOTICE;

--무결성 제약조건
/*
  가. Not Null : Null이 아닌 값만 허용
  나. Unique Key : 해당 컬럼에서 중복되지 않고 유일한 값만 허용
  다. Primary Key : Not null 와 Unique key의 결합된 형태, 1개의 테이블에 1번만 사용가능
  라. Foreign Key : 참조되는 테이블의 컬럼 값과 일치하거나 Null만 허용
  마. Check : 저장 가능한 데이터 값의 범위나 조건안에서 허용
  */
   INSERT INTO [TABLE_NAME](COLUMN_NAME,...) VALUES(COLUMN_NAME,...);
  
  CREATE TABLE TESTNN(
    NNID NUMBER(5) NOT NULL,
    NNNAME VARCHAR2(20)
    );
    INSERT INTO TESTNN VALUES(1,NULL);
    CREATE TABLE TESTNN2(
    NN_ID NUMBER(5) CONSTRAINT T2_NNID NOT NULL, --컬럼레벨
    NN_NAME VARCHAR2(20),
    --테이블레벨
    CONSTRAINT T2_NNID NOT NULL (NN_ID)
    );
    
--    테이블 실습
CREATE TABLE ORDERS(
ORDERNO CHAR(4),
CUSTNO CHAR(4),
ORDERDATE DATE DEFAULT SYSDATE,
SHIPDATE DATE,
SHIPADDRESS VARCHAR2(40),
QUANTITY NUMBER
);

COMMENT ON COLUMN ORDERS.ORDERNO IS '주문번호';
COMMENT ON COLUMN ORDERS.CUSTNO IS '고객번호';
COMMENT ON COLUMN ORDERS.ORDERDATE IS '주문일자';
COMMENT ON COLUMN ORDERS.SHIPDATE IS '배송일자';
COMMENT ON COLUMN ORDERS.SHIPADDRESS IS '배송주소';
COMMENT ON COLUMN ORDERS.QUANTITY IS '주문수량';
 
CREATE TABLE TESTUN(
UN_ID       CHAR(3) UNIQUE,
UN_NAME   VARCHAR2(10) NOT NULL
);
INSERT INTO TESTUN VALUES ('AAA','ORACLE');
INSERT INTO TESTUN VALUES ('AAA','JAVA');

SELECT * FROM TESTUN;

CREATE TABLE TABLE_PK
(ID CHAR(3) PRIMARY KEY,
SNAME VARCHAR2(20));

INSERT INTO TABLE_PK
VALUES ('100','ORACLE');

INSERT INTO TABLE_PK
VALUES ('100','IBM');

INSERT INTO TABLE_PK
VALUES (NULL, 'SUN');

CREATE TABLE TABLE_PK2
(ID CHAR(3),
SNAME VARCHAR2(20),
SCODE CHAR(2),
CONSTRAINT TP2_PK PRIMARY KEY (ID,SNAME));

INSERT INTO TABLE_PK2
VALUES ('100','ORACLE','02');

INSERT INTO TABLE_PK2
VALUES (NULL,'ORACLE','01');

CREATE TABLE TABLE_PK3
(ID CHAR(3) PRIMARY KEY,
SNAME VARCHAR2(20) PRIMARY KEY,
SCODE CHAR(2));

CREATE TABLE TABLE_PK3
(ID CHAR(3) CONSTRAINT PK1 PRIMARY KEY,
SNAME VARCHAR2(20) CONSTRAINT PK1 PRIMARY KEY,
SCODE CHAR(2));

CREATE TABLE TABLE_FK
(ID CHAR(3),
SNAME VARCHAR2(20),
LID CHAR(2) REFERENCES LOCATION ( LOCATION_ID ) );

INSERT INTO TABLE_FK
VALUES ('200','ORACLE','C1');

CREATE TABLE TABLE_FK2
(ID CHAR(3),
SNAME VARCHAR2(20),
LID CHAR(2),
[CONSTRAINT FK1] FOREIGN KEY ( LID ) REFERENCES LOCATION ( LOCATION_ID ) );

CREATE TABLE TABLE_NOPK
(ID CHAR(3),
SNAME VARCHAR2(20));

CREATE TABLE TABLE_FK3
(ID CHAR(3) REFERENCES TABLE_NOPK,
SNAME VARCHAR2(20));

CREATE TABLE TABLE_FK3
(ID CHAR(3) REFERENCES TABLE_NOPK(ID),
SNAME VARCHAR2(20));

CREATE TABLE TABLE_FK4
(ID CHAR(3),
SNAME VARCHAR2(20),
SCODE CHAR(2),
CONSTRAINT TF4_FK FOREIGN KEY ( ID, SNAME ) REFERENCES TABLE_PK2 );

INSERT INTO TABLE_FK4
VALUES ('200','IBM','03');

CREATE TABLE TABLE_FK5
(ID CHAR(3) REFERENCES TABLE_PK2,
SNAME VARCHAR2(20) REFERENCES TABLE_PK2,
SCODE CHAR(2));

CREATE TABLE TABLE_CHECK
(EMP_ID CHAR(3) PRIMARY KEY,
SALARY NUMBER CHECK ( SALARY > 0 ),
MARRIAGE CHAR(1),
CONSTRAINT CHK_MRG CHECK ( MARRIAGE IN ( 'Y','N' ) ) );

INSERT INTO TABLE_CHECK
VALUES ('100', -100, 'Y');

INSERT INTO TABLE_CHECK
VALUES ('100', 500, '?');

CREATE TABLE TABLE_CHECK2
(ID CHAR(3) PRIMARY KEY,
HIREDATE DATE CHECK ( HIREDATE < SYSDATE ) );

CREATE TABLE TABLE_CHECK3
(EID CHAR(3) PRIMARY KEY,
ENAME VARCHAR2(10) NOT NULL,
SALARY NUMBER ,
MARRIAGE CHAR(1),
CHECK ( SALARY > 0 AND SALARY < 1000000 ));

CREATE TABLE CONSTRAINT_EMP
(EID CHAR(3) CONSTRAINT PKEID PRIMARY KEY,
ENAME VARCHAR2(20) CONSTRAINT NENAME NOT NULL,
ENO CHAR(14) CONSTRAINT NENO NOT NULL CONSTRAINT UENO UNIQUE,
EMAIL VARCHAR2(25) CONSTRAINT UEMAIL UNIQUE,
PHONE VARCHAR2(12),
HIRE_DATE DATE DEFAULT SYSDATE,
JID CHAR(2) CONSTRAINT FKJID REFERENCES JOB ON DELETE SET NULL,
SALARY NUMBER,
BONUS_PCT NUMBER,
MARRIAGE CHAR(1) DEFAULT 'N' CONSTRAINT CHK CHECK (MARRIAGE IN ('Y','N')),
MID CHAR(3) CONSTRAINT FKMID REFERENCES CONSTRAINT_EMP ON DELETE SET NULL,
DID CHAR(2),
CONSTRAINT FKDID FOREIGN KEY (DID) REFERENCES DEPARTMENT ON DELETE CASCADE
);

CREATE TABLE TABLE_SUBQUERY1
AS SELECT EMP_ID, EMP_NAME, SALARY, DEPT_NAME, JOB_TITLE
FROM EMPLOYEE
LEFT JOIN DEPARTMENT USING (DEPT_ID)
LEFT JOIN JOB USING (JOB_ID);

CREATE TABLE TABLE_SUBQUERY2 ( EID, ENAME, SALARY, DNAME, JTITLE )
AS SELECT EMP_ID, EMP_NAME, SALARY, DEPT_NAME, JOB_TITLE
FROM EMPLOYEE
LEFT JOIN DEPARTMENT USING (DEPT_ID)
LEFT JOIN JOB USING (JOB_ID);

CREATE TABLE TABLE_SUBQUERY3
( EID PRIMARY KEY,
ENAME,
SALARY CHECK (SALARY > 2000000),
DNAME,
JTITLE NOT NULL)
AS SELECT EMP_ID, EMP_NAME, SALARY, DEPT_NAME, JOB_TITLE
FROM EMPLOYEE
LEFT JOIN DEPARTMENT USING (DEPT_ID)
LEFT JOIN JOB USING (JOB_ID);

CREATE TABLE TABLE_SUBQUERY3
( EID PRIMARY KEY,
ENAME,
SALARY CHECK (SALARY > 2000000),
DNAME,
JTITLE NOT NULL)
AS SELECT EMP_ID, EMP_NAME, SALARY, DEPT_NAME, JOB_TITLE
FROM EMPLOYEE
LEFT JOIN DEPARTMENT USING (DEPT_ID)
LEFT JOIN JOB USING (JOB_ID)
WHERE SALARY > 2000000;

CREATE TABLE TABLE_SUBQUERY3
( EID PRIMARY KEY,
ENAME,
SALARY CHECK (SALARY > 2000000),
DNAME,
JTITLE DEFAULT 'N/A' NOT NULL)
AS SELECT EMP_ID, EMP_NAME, SALARY, DEPT_NAME, JOB_TITLE
FROM EMPLOYEE
LEFT JOIN DEPARTMENT USING (DEPT_ID)
LEFT JOIN JOB USING (JOB_ID)
WHERE SALARY > 2000000;

CREATE TABLE TABLE_SUBQUERY4
( EID PRIMARY KEY,
ENAME ,
SALARY CHECK (SALARY > 2000000),
DID REFERENCES DEPARTMENT,
JTITLE DEFAULT 'N/A' NOT NULL)
AS SELECT EMP_ID, EMP_NAME, SALARY, DEPT_ID, JOB_TITLE
FROM EMPLOYEE
LEFT JOIN JOB USING (JOB_ID)
WHERE SALARY > 2000000;

SELECT TABLE_NAME
FROM USER_TABLES;

SELECT TABLE_NAME
FROM USER_CATALOG;

SELECT OBJECT_NAME
FROM USER_OBJECTS
WHERE OBJECT_TYPE = 'TABLE';

SELECT OBJECT_TYPE AS 유형,
COUNT(*) AS 개수
FROM USER_OBJECTS
GROUP BY OBJECT_TYPE;

SELECT OBJECT_NAME AS 이름,
OBJECT_TYPE AS 유형,
CREATED AS 생성일,
LAST_DDL_TIME AS 최종수정일
FROM USER_OBJECTS
WHERE OBJECT_TYPE = 'TABLE';

SELECT CONSTRAINT_NAME AS 이름,
CONSTRAINT_TYPE AS 유형,
R_CONSTRAINT_NAME AS 참조,
DELETE_RULE AS 삭제규칙,
SEARCH_CONDITION AS 내용
FROM USER_CONSTRAINTS
WHERE TABLE_NAME='CONSTRAINT_EMP';

SELECT CONSTRAINT_NAME AS 이름,
CONSTRAINT_TYPE AS 유형,
COLUMN_NAME AS 컬럼,
R_CONSTRAINT_NAME AS 참조,
DELETE_RULE AS 삭제규칙,
SEARCH_CONDITION AS 내용
FROM USER_CONSTRAINTS
JOIN USER_CONS_COLUMNS USING (CONSTRAINT_NAME, TABLE_NAME)
WHERE TABLE_NAME='CONSTRAINT_EMP';

commit;


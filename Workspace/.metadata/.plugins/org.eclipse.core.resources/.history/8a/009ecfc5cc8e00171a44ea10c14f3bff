package employee.model.dao;

import java.io.FileReader;
import java.io.IOException;
import java.sql.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Properties;

import static common.JDBCtemplate.*;
import employee.model.vo.Employee;

/*Data Access Object*/
public class EmployeeDao {

	private Properties prop = new Properties();

	public EmployeeDao() {
		try {
			prop.load(new FileReader("src/prop/query.properties"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public Employee selectOne(Connection conn, String empId) {

		Employee emp = null;
		PreparedStatement pstmt = null;
		ResultSet result = null;
		String query = prop.getProperty("selectOne");

		try {
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, empId);
			result = pstmt.executeQuery();
			if (result.next()) {// 조회해온 결과의 BOF 다음 값이 있다면
				emp = new Employee(empId, result.getString("EMP_NAME"), result.getString("EMP_NO"),
						result.getString("EMAIL"), result.getString("PHONE"), result.getDate("HIRE_DATE"),
						result.getString("JOB_ID"), result.getInt("SALARY"), result.getDouble("BONUS_PCT"),
						result.getString("MARRIAGE"), result.getString("MGR_ID"), result.getString("DEPT_ID"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(result);
			close(pstmt);
		}
		return emp;
	}

	// list
	public ArrayList<Employee> selectList(Connection conn) {
		Employee emp = null;
		ArrayList<Employee> list = new ArrayList<Employee>();
		PreparedStatement pstmt = null;
		ResultSet result = null;
		String query = prop.getProperty("selectList");

		try {
			pstmt = conn.prepareStatement(query);
			result = pstmt.executeQuery();
			while (result.next()) {// 조회해온 결과의 BOF 다음 값이 있다면
				emp = new Employee(result.getString("EMP_ID"), result.getString("EMP_NAME"), result.getString("EMP_NO"),
						result.getString("EMAIL"), result.getString("PHONE"), result.getDate("HIRE_DATE"),
						result.getString("JOB_ID"), result.getInt("SALARY"), result.getDouble("BONUS_PCT"),
						result.getString("MARRIAGE"), result.getString("MGR_ID"), result.getString("DEPT_ID"));
				list.add(emp);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(result);
			close(pstmt);
		}
		return list;
	}

	public HashMap<String, Employee> selectMap(Connection conn) {
		Employee emp = null;
		HashMap<String, Employee> map = new HashMap<String, Employee>();
		PreparedStatement pstmt = null;
		ResultSet result = null;
		String query = prop.getProperty("selectMap");

		try {
			pstmt = conn.prepareStatement(query);
			result = pstmt.executeQuery();
			while (result.next()) {// 조회해온 결과의 BOF 다음 값이 있다면
				emp = new Employee(result.getString("EMP_ID"), result.getString("EMP_NAME"), result.getString("EMP_NO"),
						result.getString("EMAIL"), result.getString("PHONE"), result.getDate("HIRE_DATE"),
						result.getString("JOB_ID"), result.getInt("SALARY"), result.getDouble("BONUS_PCT"),
						result.getString("MARRIAGE"), result.getString("MGR_ID"), result.getString("DEPT_ID"));
				map.put(emp.getEmpId(), emp);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(result);
			close(pstmt);
		}
		return map;
	}

	public ArrayList<Employee> selectSearchName(Connection conn, String empName) {
		Employee emp = null;
		ArrayList<Employee> list = new ArrayList<Employee>();
		PreparedStatement pstmt = null;
		ResultSet result = null;
		String query = null;

		// 이름으로 찾기 (포함글자)
		query = prop.getProperty("selectSearchName");

		try {
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, "%"+empName+"%");
			result = pstmt.executeQuery();
			while (result.next()) {// 조회해온 결과의 BOF 다음 값이 있다면
				emp = new Employee(result.getString("EMP_ID"), result.getString("EMP_NAME"), result.getString("EMP_NO"),
						result.getString("EMAIL"), result.getString("PHONE"), result.getDate("HIRE_DATE"),
						result.getString("JOB_ID"), result.getInt("SALARY"), result.getDouble("BONUS_PCT"),
						result.getString("MARRIAGE"), result.getString("MGR_ID"), result.getString("DEPT_ID"));
				list.add(emp);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(result);
			close(pstmt);
		}
		return list;
	}

	public ArrayList<Employee> selectSearchHireDate(Connection conn, Date hireDate) {
		Employee emp = null;
		ArrayList<Employee> list = new ArrayList<Employee>();
		PreparedStatement pstmt = null;
		ResultSet result = null;
		String query = null;

		// 입사일로 찾기 (포함글자)
		query = prop.getProperty("selectSearchHireDate");

		try {
			pstmt = conn.prepareStatement(query);
			pstmt.setDate(1, hireDate);
			result = pstmt.executeQuery();
			while (result.next()) {// 조회해온 결과의 BOF 다음 값이 있다면
				emp = new Employee(result.getString("EMP_ID"), result.getString("EMP_NAME"), result.getString("EMP_NO"),
						result.getString("EMAIL"), result.getString("PHONE"), result.getDate("HIRE_DATE"),
						result.getString("JOB_ID"), result.getInt("SALARY"), result.getDouble("BONUS_PCT"),
						result.getString("MARRIAGE"), result.getString("MGR_ID"), result.getString("DEPT_ID"));
				list.add(emp);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(result);
			close(pstmt);
		}
		return list;
	}

	public ArrayList<Employee> selectSearchSalary(Connection conn, int minSal, int maxSal) {
		Employee emp = null;
		ArrayList<Employee> list = new ArrayList<Employee>();
		PreparedStatement pstmt = null;
		ResultSet result = null;
		String query = null;

		// 이름으로 찾기 (포함글자)
		query = prop.getProperty("selectSearchSalary");

		try {
			pstmt = conn.prepareStatement(query);
			pstmt.setInt(1, minSal);
			pstmt.setInt(2, maxSal);
			result = pstmt.executeQuery();
			while (result.next()) {// 조회해온 결과의 BOF 다음 값이 있다면
				emp = new Employee(result.getString("EMP_ID"), result.getString("EMP_NAME"), result.getString("EMP_NO"),
						result.getString("EMAIL"), result.getString("PHONE"), result.getDate("HIRE_DATE"),
						result.getString("JOB_ID"), result.getInt("SALARY"), result.getDouble("BONUS_PCT"),
						result.getString("MARRIAGE"), result.getString("MGR_ID"), result.getString("DEPT_ID"));
				list.add(emp);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(result);
			close(pstmt);
		}
		return list;
	}

	public int insertEmployee(Connection conn, Employee emp) {
		// 성공 1
		// 실패 0
		int result = 0;
		PreparedStatement pstmt = null;

		String query = prop.getProperty("insertEmployee");
		try {
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, emp.getEmpName());
			pstmt.setString(2, emp.getEmpNo());
			pstmt.setString(3, emp.getEmail());
			pstmt.setString(4, emp.getPhone());
			pstmt.setString(5, "%"+emp.getJobId()+"%");
			pstmt.setInt(6, emp.getSalary());
			pstmt.setDouble(7, emp.getBonusPct());
			pstmt.setString(8, emp.getMarriage());
			pstmt.setString(9, emp.getEmpName());
			pstmt.setString(10, emp.getMgrId());
			pstmt.setString(11, "%"+emp.getDeptId()+"%");

			result = pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(pstmt);
		}
		return result;
	}

	public int deleteEmployee(Connection conn, String empId) {
		int result = 0;
		PreparedStatement state = null;
		String query = prop.getProperty("deleteEmployee");
		try {
			state = conn.prepareStatement(query);
			state.setString(1, empId);
			result = state.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(state);
		}
		return result;
	}

	public int updateEmployee(Connection conn, Employee emp) {
		int result = 0;

		PreparedStatement pstmt = null;

		String query = prop.getProperty("updateEmployee");
		try {

			// stmt = conn.createStatement();
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, emp.getEmail());
			pstmt.setString(2, emp.getPhone());
			pstmt.setString(3, emp.getMarriage());
			pstmt.setString(4, emp.getEmpId());

			// result = stmt.executeUpdate(query);
			result = pstmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(pstmt);

		}
		return result;
	}

}
